<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALCwsACsrKwINDQ0OCAgIDwgICA8ICAgPCAgIDwgI
        CA8ICAgPCAgIDwgICA8ICAgPCAgIDwgICA8ICAgPCAgIDwgICA8ICAgPCAgIDwgICA8ICAgPCAgIDwgI
        CA8ICAgPCAgIDwgICA8ICAgPDQ0NDSkpKQIsLCwAAAAAAAAAAAArKysAKysrDwwMDKQHBwfOBwcHywcH
        B8sHBwfLBwcHywcHB8sHBwfLBwcHywcHB8sHBwfLBwcHywcHB8sHBwfLBwcHywcHB8sHBwfLBwcHywcH
        B8sHBwfLBwcHywcHB8sHBwfLBwcHywcHB84ODg6XNTU1CDExMQAAAAAAAAAAADo6OgAAAAAAEhISgggI
        CP8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcH
        B/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/CAgI/RISEm4AAAAAUlJSAAAAAAAAAAAAAAAAABgY
        GAAfHx8bDg4OxAcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcH
        B/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8NDQ2zHh4eEhkZGQAAAAAAAAAAAAAA
        AAAAAAAAVlZWAAEBAQAfHx8wDQ0NvwgICP0HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcH
        B/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8ICAj7Dg4OtCAgICUUFBQAMDAwAAAA
        AAAAAAAAAAAAAAAAAAAAAAAASUlJAAsLCwAmJiYXEhISZA8PD6QLCwviBwcH/wcHB/8HBwf/BwcH/wcH
        B/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8LCwvbEBAQoBQUFF0kJCQRGBgYADo6
        OgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wAhISEAKysrFQ0NDcgHBwf/BwcH/wcH
        B/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/w0NDbcuLi4NIiIiAP//
        /wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAW1tbAAAAAAAUFBRhCAgI+gcH
        B/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/CQkJ9BQU
        FE0JCQkAcXFxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnJycAKysrEw4O
        DsQHBwf/BwcH/wcHB/8JCQn1CwsL7ggICPkHBwf/BwcH/wcHB/8HBwf/CQkJ+AoKCu4ICAj3BwcH/wcH
        B/8HBwf/DQ0Nsy0tLQsnJycAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAd3d3AAAA
        AAAYGBhhCQkJ+gcHB/8ICAj0EBAQkhUVFUAfHx8vExMTVwoKCtAHBwf/BwcH/woKCsYTExNPHx8fLhUV
        FUQMDAyaCAgI9wcHB/8JCQn1FxcXTQkJCQCUlJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAArKysAMDAwFA8PD8UHBwf/BwcH/w4ODpA9PT0EIyMjAB4eHgAWFhYAGRkZQAsLC9wLCwvTGxsbMhYW
        FgAjIyMAFBQUABsbGwgMDAyhBwcH/wcHB/8PDw+0MzMzCywsLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAApKSkAAAAAAAiIiJVDg4O0w8PD7oUFBShHBwcSBcXFzAUFBRDFhYWUQ8PD1oKCgpdGBgYjRcX
        F4gJCQlbERERWhUVFVAVFRVBGhoaLxkZGU8TExOlDw8Pvg4ODtAgICBEEBAQAJ+fnwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAKmpqQAJCQkAKysrDh8fH2URERGaDg4OtA0NDc4KCgriCQkJ8AkJCfcICAj8CAgI/gcH
        B/4ICAj9CAgI/QcHB/4ICAj+CAgI+wkJCfYKCgrvCwsL4Q0NDcsQEBCzFBQUmh4eHlwoKCgKDw8PAOjo
        6AAAAAAAAAAAAAAAAAAAAAAAGxsbAB4eHhUNDQ2uCQkJ9QcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcH
        B/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf+CQkJ8w0N
        DZ8dHR0NGxsbAAAAAAAAAAAAAAAAAAAAAAAeHh4AISEhFA8PD6kJCQnzBwcH/wcHB/8HBwf/BwcH/wcH
        B/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wgI
        CP4JCQnwDg4Omh8fHw0cHBwAAAAAAAAAAAAAAAAAAAAAAMPDwwAHBwcAKioqCxcXFzsSEhJ1Dw8PvwgI
        CP8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wgI
        CP0PDw+2ERERcBcXFzYqKioIFRUVALW1tQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1NTUAA4O
        DgAXFxdJCQkJ+QcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcH
        B/8HBwf/CQkJ8hoaGjgVFRUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAFxcXABoaGjcJCQnxBwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcH
        B/8HBwf/BwcH/wcHB/8KCgroHh4eKB0dHQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAaGhoAGxsbJwoKCucHBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcH
        B/8HBwf/BwcH/wcHB/8HBwf/BwcH/wsLC9sgICAaISEhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAACMjIwAiIiIaCwsL2wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcH
        B/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/DAwMzCoqKhAsLCwAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgoACYmJg8LCwvLBwcH/wcHB/8HBwf/BwcH/wcH
        B/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8NDQ26NjY2BzMzMwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6OjoAPz8/Bw4ODrgHBwf/BwcH/wcH
        B/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/w8PD6aUlJQCSkpKAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE9PTwAAAAAAERERiwcH
        B/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8ICAj/EhISdwAA
        AABMTEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQU
        FAAbGxsyCwsL3wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wcHB/8HBwf/BwcH/wwM
        DNQcHBwlFhYWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAALi4uAAAAAAAVFRVNCwsL1ggICP4HBwf/CAgI/wkJCe8KCgrTCgoK1QkJCfEHBwf/BwcH/wgI
        CP0LCwvNGhoaQgAAAAA+Pj4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAQkJCANTU1AAeHh4hFBQUZhQUFIkRERFyFxcXOB8fHxUbGxsWFhYWPRIS
        EncUFBSIFBQUXxwcHBsAAAAAREREAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////wAAAA8AAAAPgAAAH4AAAB/AAAA/4AAAf/gAAf/4A
        AH/8AAA//AAAP/gcOB/4AAAf8AAAD+AAAAfgAAAH8AAAD/4AAH/+AAB//gAAf/4AAH/+AAB//gAAf/8A
        AP//AAD//4AB///AA/////////////////8=
</value>
  </data>
</root>